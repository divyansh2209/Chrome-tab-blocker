{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://website_blocker_extention/webpack/bootstrap","webpack://website_blocker_extention/webpack/runtime/make namespace object","webpack://website_blocker_extention/./src/background/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","chrome.runtime.onInstalled.addListener(() => {\n    chrome.storage.local.get(['blocked'], (local) => {\n        if (!Array.isArray(local.blocked)) {\n            chrome.storage.local.set({ blocked: [] });\n        }\n    });\n});\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    const url = changeInfo.url || tab.url;\n    if (!url || !url.startsWith('http')) {\n        return;\n    }\n    const hostname = new URL(url).hostname;\n    chrome.storage.local.get(['blocked'], (local) => {\n        const { blocked } = local;\n        if (Array.isArray(blocked) && blocked.some((domain) => hostname.includes(domain))) {\n            chrome.tabs.remove(tabId, () => {\n                if (chrome.runtime.lastError) {\n                    console.warn(`Failed to remove tab ${tabId}: ${chrome.runtime.lastError.message}`);\n                }\n            });\n        }\n    });\n});\nexport {};\n"],"names":[],"sourceRoot":""}